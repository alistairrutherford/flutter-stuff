/**
 * Datex 2 Parser.
 *
 * JSON Schema generated by submittig Datex XSD to jsonix: https://github.com/highsource/jsonix
 *
 * Generated from JSON Schema entered into https://app.quicktype.io
 */

import 'dart:convert';
import 'package:provider6/datex/datetime.dart' as DatextDateTime;

Coordinate coordinateFromJson(String str) => Coordinate.fromJson(json.decode(str));

String coordinateToJson(Coordinate data) => json.encode(data.toJson());

class Coordinate {
  Name name;
  D2LogicalModel value;

  Coordinate({
    this.name,
    this.value,
  });

  factory Coordinate.fromJson(Map<String, dynamic> json) {
    Coordinate coordinate = null;
    if (json !=null) {
      coordinate = Coordinate(
        name: json["name"] == null ? null : Name.fromJson(json["name"]),
        value: json["value"] == null ? null : D2LogicalModel.fromJson(
            json["value"]),
      );
    }
    return coordinate;
  }

  Map<String, dynamic> toJson() => {
    "name": name == null ? null : name.toJson(),
    "value": value == null ? null : value.toJson(),
  };
}

class Name {
  LocalPartEnum localPart;
  NamespaceUriEnum namespaceUri;
  String prefix;

  Name({
    this.localPart,
    this.namespaceUri,
    this.prefix,
  });

  factory Name.fromJson(Map<String, dynamic> json) {
    Name name = null;
    if (json != null) {
      name = Name(
        localPart: localPartEnumValues.map[json["localPart"]],
        namespaceUri: json["namespaceURI"] == null
            ? null
            : namespaceUriEnumValues.map[json["namespaceURI"]],
        prefix: json["prefix"] == null ? null : json["prefix"],
      );
    }
    return name;
  }

  Map<String, dynamic> toJson() => {
    "localPart": localPartEnumValues.reverse[localPart],
    "namespaceURI": namespaceUri == null ? null : namespaceUriEnumValues.reverse[namespaceUri],
    "prefix": prefix == null ? null : prefix,
  };
}

enum LocalPartEnum { D2_LOGICAL_MODEL }

final localPartEnumValues = EnumValues({
  "d2LogicalModel": LocalPartEnum.D2_LOGICAL_MODEL
});

enum NamespaceUriEnum { HTTP_DATEX2_EU_SCHEMA_220 }

final namespaceUriEnumValues = EnumValues({
  "http://datex2.eu/schema/2/2_0": NamespaceUriEnum.HTTP_DATEX2_EU_SCHEMA_220
});

class D2LogicalModel {
  D2LogicalModelExtension d2LogicalModelExtension;
  Exchange exchange;
  dynamic modelBaseVersion;
  PayloadPublication payloadPublication;

  D2LogicalModel({
    this.d2LogicalModelExtension,
    this.exchange,
    this.modelBaseVersion,
    this.payloadPublication,
  });

  factory D2LogicalModel.fromJson(Map<String, dynamic> json) {
    D2LogicalModel d2logicalModel = null;
    if (json != null) {
      D2LogicalModel(
        d2LogicalModelExtension: json["d2LogicalModelExtension"] == null
            ? null
            : D2LogicalModelExtension.fromJson(json["d2LogicalModelExtension"]),
        exchange: json["exchange"] == null
            ? null
            : Exchange.fromJson(json["exchange"]),
        modelBaseVersion: json["modelBaseVersion"],
        payloadPublication: json["payloadPublication"] == null
            ? null
            : PayloadPublication.fromJson(json["payloadPublication"]),
      );
    }
    return d2logicalModel;
  }

  Map<String, dynamic> toJson() => {
    "d2LogicalModelExtension": d2LogicalModelExtension == null ? null : d2LogicalModelExtension.toJson(),
    "exchange": exchange.toJson(),
    "modelBaseVersion": modelBaseVersion,
    "payloadPublication": payloadPublication == null ? null : payloadPublication.toJson(),
  };
}

class D2LogicalModelExtension {
  List<dynamic> any;

  D2LogicalModelExtension({
    this.any,
  });

  factory D2LogicalModelExtension.fromJson(Map<String, dynamic> json) {
    D2LogicalModelExtension d2logicalModelExtension = null;
    if (json != null) {
      d2logicalModelExtension = D2LogicalModelExtension(
        any: json["any"] == null ? null : List<dynamic>.from(
            json["any"].map((x) => x)),
      );
    }
    return d2logicalModelExtension;
  }

  Map<String, dynamic> toJson() => {
    "any": any == null ? null : List<dynamic>.from(any.map((x) => x)),
  };
}

class Exchange {
  List<CatalogueReference> catalogueReference;
  ChangedFlag changedFlag;
  String clientIdentification;
  bool deliveryBreak;
  DenyReason denyReason;
  D2LogicalModelExtension exchangeExtension;
  List<FilterReference> filterReference;
  DatextDateTime.DateTime historicalStartDate;
  DatextDateTime.DateTime historicalStopDate;
  bool keepAlive;
  RequestType requestType;
  Response response;
  Subscription subscription;
  String subscriptionReference;
  SupplierIdentification supplierIdentification;
  Target target;

  Exchange({
    this.catalogueReference,
    this.changedFlag,
    this.clientIdentification,
    this.deliveryBreak,
    this.denyReason,
    this.exchangeExtension,
    this.filterReference,
    this.historicalStartDate,
    this.historicalStopDate,
    this.keepAlive,
    this.requestType,
    this.response,
    this.subscription,
    this.subscriptionReference,
    this.supplierIdentification,
    this.target,
  });

  factory Exchange.fromJson(Map<String, dynamic> json) {
    Exchange exchange = null;

    if (json != null) {
      exchange = Exchange(
        catalogueReference: json["catalogueReference"] == null ? null : List<
            CatalogueReference>.from(json["catalogueReference"].map((x) =>
            CatalogueReference.fromJson(x))),
        changedFlag: json["changedFlag"] == null ? null : changedFlagValues
            .map[json["changedFlag"]],
        clientIdentification: json["clientIdentification"] == null
            ? null
            : json["clientIdentification"],
        deliveryBreak: json["deliveryBreak"] == null
            ? null
            : json["deliveryBreak"],
        denyReason: json["denyReason"] == null ? null : denyReasonValues
            .map[json["denyReason"]],
        exchangeExtension: json["exchangeExtension"] == null
            ? null
            : D2LogicalModelExtension.fromJson(json["exchangeExtension"]),
        filterReference: json["filterReference"] == null ? null : List<
            FilterReference>.from(
            json["filterReference"].map((x) => FilterReference.fromJson(x))),
        historicalStartDate: json["historicalStartDate"] == null
            ? null
            : DatextDateTime.DateTime
            .fromJson(json["historicalStartDate"]),
        historicalStopDate: json["historicalStopDate"] == null ? null : DatextDateTime.DateTime
            .fromJson(json["historicalStopDate"]),
        keepAlive: json["keepAlive"] == null ? null : json["keepAlive"],
        requestType: json["requestType"] == null ? null : requestTypeValues
            .map[json["requestType"]],
        response: json["response"] == null ? null : responseValues
            .map[json["response"]],
        subscription: json["subscription"] == null ? null : Subscription
            .fromJson(
            json["subscription"]),
        subscriptionReference: json["subscriptionReference"] == null
            ? null
            : json["subscriptionReference"],
        supplierIdentification: SupplierIdentification.fromJson(
            json["supplierIdentification"]),
        target: json["target"] == null ? null : Target.fromJson(json["target"]),
      );
    }
    return exchange;
  }

  Map<String, dynamic> toJson() => {
    "catalogueReference": catalogueReference == null ? null : List<dynamic>.from(catalogueReference.map((x) => x.toJson())),
    "changedFlag": changedFlag == null ? null : changedFlagValues.reverse[changedFlag],
    "clientIdentification": clientIdentification == null ? null : clientIdentification,
    "deliveryBreak": deliveryBreak == null ? null : deliveryBreak,
    "denyReason": denyReason == null ? null : denyReasonValues.reverse[denyReason],
    "exchangeExtension": exchangeExtension == null ? null : exchangeExtension.toJson(),
    "filterReference": filterReference == null ? null : List<dynamic>.from(filterReference.map((x) => x.toJson())),
    "historicalStartDate": historicalStartDate == null ? null : historicalStartDate.toJson(),
    "historicalStopDate": historicalStopDate == null ? null : historicalStopDate.toJson(),
    "keepAlive": keepAlive == null ? null : keepAlive,
    "requestType": requestType == null ? null : requestTypeValues.reverse[requestType],
    "response": response == null ? null : responseValues.reverse[response],
    "subscription": subscription == null ? null : subscription.toJson(),
    "subscriptionReference": subscriptionReference == null ? null : subscriptionReference,
    "supplierIdentification": supplierIdentification.toJson(),
    "target": target == null ? null : target.toJson(),
  };
}

class CatalogueReference {
  D2LogicalModelExtension catalogueReferenceExtension;
  String keyCatalogueReference;

  CatalogueReference({
    this.catalogueReferenceExtension,
    this.keyCatalogueReference,
  });

  factory CatalogueReference.fromJson(Map<String, dynamic> json) {
    CatalogueReference catalogueReference = null;
    if (json != null) {
      CatalogueReference(
        catalogueReferenceExtension: json["catalogueReferenceExtension"] == null
            ? null
            : D2LogicalModelExtension.fromJson(
            json["catalogueReferenceExtension"]),
        keyCatalogueReference: json["keyCatalogueReference"] == null
            ? null
            : json["keyCatalogueReference"],
      );
    }
    return catalogueReference;
  }

  Map<String, dynamic> toJson() => {
    "catalogueReferenceExtension": catalogueReferenceExtension == null ? null : catalogueReferenceExtension.toJson(),
    "keyCatalogueReference": keyCatalogueReference == null ? null : keyCatalogueReference,
  };
}

enum ChangedFlag { CATALOGUE, FILTER }

final changedFlagValues = EnumValues({
  "catalogue": ChangedFlag.CATALOGUE,
  "filter": ChangedFlag.FILTER
});

enum DenyReason { UNKNOWN_REASON, WRONG_CATALOGUE, WRONG_FILTER, WRONG_ORDER, WRONG_PARTNER }

final denyReasonValues = EnumValues({
  "unknownReason": DenyReason.UNKNOWN_REASON,
  "wrongCatalogue": DenyReason.WRONG_CATALOGUE,
  "wrongFilter": DenyReason.WRONG_FILTER,
  "wrongOrder": DenyReason.WRONG_ORDER,
  "wrongPartner": DenyReason.WRONG_PARTNER
});

class FilterReference {
  bool deleteFilter;
  bool filterOperationApproved;
  D2LogicalModelExtension filterReferenceExtension;
  String keyFilterReference;

  FilterReference({
    this.deleteFilter,
    this.filterOperationApproved,
    this.filterReferenceExtension,
    this.keyFilterReference,
  });

  factory FilterReference.fromJson(Map<String, dynamic> json) {
    FilterReference filterReference = null;
    if (json != null) {
      filterReference = FilterReference(
        deleteFilter: json["deleteFilter"] == null
            ? null
            : json["deleteFilter"],
        filterOperationApproved: json["filterOperationApproved"] == null
            ? null
            : json["filterOperationApproved"],
        filterReferenceExtension: json["filterReferenceExtension"] == null
            ? null
            : D2LogicalModelExtension.fromJson(
            json["filterReferenceExtension"]),
        keyFilterReference: json["keyFilterReference"] == null
            ? null
            : json["keyFilterReference"],
      );
    }
    return filterReference;
  }

  Map<String, dynamic> toJson() => {
    "deleteFilter": deleteFilter == null ? null : deleteFilter,
    "filterOperationApproved": filterOperationApproved == null ? null : filterOperationApproved,
    "filterReferenceExtension": filterReferenceExtension == null ? null : filterReferenceExtension.toJson(),
    "keyFilterReference": keyFilterReference == null ? null : keyFilterReference,
  };
}

enum RequestType { CATALOGUE, FILTER, REQUEST_DATA, REQUEST_HISTORICAL_DATA, SUBSCRIPTION }

final requestTypeValues = EnumValues({
  "catalogue": RequestType.CATALOGUE,
  "filter": RequestType.FILTER,
  "requestData": RequestType.REQUEST_DATA,
  "requestHistoricalData": RequestType.REQUEST_HISTORICAL_DATA,
  "subscription": RequestType.SUBSCRIPTION
});

enum Response { ACKNOWLEDGE, CATALOGUE_REQUEST_DENIED, FILTER_REQUEST_DENIED, REQUEST_DENIED, SUBSCRIPTION_REQUEST_DENIED }

final responseValues = EnumValues({
  "acknowledge": Response.ACKNOWLEDGE,
  "catalogueRequestDenied": Response.CATALOGUE_REQUEST_DENIED,
  "filterRequestDenied": Response.FILTER_REQUEST_DENIED,
  "requestDenied": Response.REQUEST_DENIED,
  "subscriptionRequestDenied": Response.SUBSCRIPTION_REQUEST_DENIED
});

class Subscription {
  CatalogueReference catalogueReference;
  bool deleteSubscription;
  double deliveryInterval;
  FilterReference filterReference;
  OperatingMode operatingMode;
  D2LogicalModelExtension subscriptionExtension;
  DatextDateTime.DateTime subscriptionStartTime;
  SubscriptionState subscriptionState;
  DatextDateTime.DateTime subscriptionStopTime;
  List<Target> target;
  UpdateMethod updateMethod;

  Subscription({
    this.catalogueReference,
    this.deleteSubscription,
    this.deliveryInterval,
    this.filterReference,
    this.operatingMode,
    this.subscriptionExtension,
    this.subscriptionStartTime,
    this.subscriptionState,
    this.subscriptionStopTime,
    this.target,
    this.updateMethod,
  });

  factory Subscription.fromJson(Map<String, dynamic> json) {
    Subscription subscription = null;
    if (json != null) {
      subscription = Subscription(
        catalogueReference: json["catalogueReference"] == null
            ? null
            : CatalogueReference.fromJson(json["catalogueReference"]),
        deleteSubscription: json["deleteSubscription"] == null
            ? null
            : json["deleteSubscription"],
        deliveryInterval: json["deliveryInterval"] == null
            ? null
            : json["deliveryInterval"].toDouble(),
        filterReference: json["filterReference"] == null
            ? null
            : FilterReference
            .fromJson(json["filterReference"]),
        operatingMode: operatingModeValues.map[json["operatingMode"]],
        subscriptionExtension: json["subscriptionExtension"] == null
            ? null
            : D2LogicalModelExtension.fromJson(json["subscriptionExtension"]),
        subscriptionStartTime: json["subscriptionStartTime"] == null
            ? null
            : DatextDateTime.DateTime.fromJson(json["subscriptionStartTime"]),
        subscriptionState: subscriptionStateValues
            .map[json["subscriptionState"]],
        subscriptionStopTime: json["subscriptionStopTime"] == null
            ? null
            : DatextDateTime.DateTime.fromJson(json["subscriptionStopTime"]),
        target: List<Target>.from(
            json["target"].map((x) => Target.fromJson(x))),
        updateMethod: updateMethodValues.map[json["updateMethod"]],
      );
    }
    return subscription;
  }

  Map<String, dynamic> toJson() => {
    "catalogueReference": catalogueReference == null ? null : catalogueReference.toJson(),
    "deleteSubscription": deleteSubscription == null ? null : deleteSubscription,
    "deliveryInterval": deliveryInterval == null ? null : deliveryInterval,
    "filterReference": filterReference == null ? null : filterReference.toJson(),
    "operatingMode": operatingModeValues.reverse[operatingMode],
    "subscriptionExtension": subscriptionExtension == null ? null : subscriptionExtension.toJson(),
    "subscriptionStartTime": subscriptionStartTime == null ? null : subscriptionStartTime.toJson(),
    "subscriptionState": subscriptionStateValues.reverse[subscriptionState],
    "subscriptionStopTime": subscriptionStopTime == null ? null : subscriptionStopTime.toJson(),
    "target": List<dynamic>.from(target.map((x) => x.toJson())),
    "updateMethod": updateMethodValues.reverse[updateMethod],
  };
}

enum OperatingMode { OPERATING_MODE0, OPERATING_MODE1, OPERATING_MODE2, OPERATING_MODE3 }

final operatingModeValues = EnumValues({
  "operatingMode0": OperatingMode.OPERATING_MODE0,
  "operatingMode1": OperatingMode.OPERATING_MODE1,
  "operatingMode2": OperatingMode.OPERATING_MODE2,
  "operatingMode3": OperatingMode.OPERATING_MODE3
});

enum SubscriptionState { ACTIVE, SUSPENDED }

final subscriptionStateValues = EnumValues({
  "active": SubscriptionState.ACTIVE,
  "suspended": SubscriptionState.SUSPENDED
});

class Target {
  String address;
  String protocol;
  D2LogicalModelExtension targetExtension;

  Target({
    this.address,
    this.protocol,
    this.targetExtension,
  });

  factory Target.fromJson(Map<String, dynamic> json) {
    Target target = null;
    if (json != null) {
      target = Target(
        address: json["address"] == null ? null : json["address"],
        protocol: json["protocol"] == null ? null : json["protocol"],
        targetExtension: json["targetExtension"] == null
            ? null
            : D2LogicalModelExtension.fromJson(json["targetExtension"]),
      );
    }
    return target;
  }

  Map<String, dynamic> toJson() => {
    "address": address == null ? null : address,
    "protocol": protocol == null ? null : protocol,
    "targetExtension": targetExtension == null ? null : targetExtension.toJson(),
  };
}

enum UpdateMethod { ALL_ELEMENT_UPDATE, SINGLE_ELEMENT_UPDATE, SNAPSHOT }

final updateMethodValues = EnumValues({
  "allElementUpdate": UpdateMethod.ALL_ELEMENT_UPDATE,
  "singleElementUpdate": UpdateMethod.SINGLE_ELEMENT_UPDATE,
  "snapshot": UpdateMethod.SNAPSHOT
});

class SupplierIdentification {
  Country country;
  D2LogicalModelExtension internationalIdentifierExtension;
  String nationalIdentifier;

  SupplierIdentification({
    this.country,
    this.internationalIdentifierExtension,
    this.nationalIdentifier,
  });

  factory SupplierIdentification.fromJson(Map<String, dynamic> json) {
    SupplierIdentification supplierIdentification = null;

    if (json != null) {
      supplierIdentification = SupplierIdentification(
        country: countryValues.map[json["country"]],
        internationalIdentifierExtension: json["internationalIdentifierExtension"] ==
            null ? null : D2LogicalModelExtension.fromJson(
            json["internationalIdentifierExtension"]),
        nationalIdentifier: json["nationalIdentifier"] == null
            ? null
            : json["nationalIdentifier"],
      );
    }
    return supplierIdentification;
  }

  Map<String, dynamic> toJson() => {
    "country": countryValues.reverse[country],
    "internationalIdentifierExtension": internationalIdentifierExtension == null ? null : internationalIdentifierExtension.toJson(),
    "nationalIdentifier": nationalIdentifier == null ? null : nationalIdentifier,
  };
}

enum Country { AT, BE, BG, CH, CS, CY, CZ, DE, DK, EE, ES, FI, FO, FR, GB, GG, GI, GR, HR, HU, IE, IM, IS, IT, JE, LI, LT, LU, LV, MA, MC, MK, MT, NL, NO, PL, PT, RO, SE, SI, SK, SM, TR, VA, OTHER }

final countryValues = EnumValues({
  "at": Country.AT,
  "be": Country.BE,
  "bg": Country.BG,
  "ch": Country.CH,
  "cs": Country.CS,
  "cy": Country.CY,
  "cz": Country.CZ,
  "de": Country.DE,
  "dk": Country.DK,
  "ee": Country.EE,
  "es": Country.ES,
  "fi": Country.FI,
  "fo": Country.FO,
  "fr": Country.FR,
  "gb": Country.GB,
  "gg": Country.GG,
  "gi": Country.GI,
  "gr": Country.GR,
  "hr": Country.HR,
  "hu": Country.HU,
  "ie": Country.IE,
  "im": Country.IM,
  "is": Country.IS,
  "it": Country.IT,
  "je": Country.JE,
  "li": Country.LI,
  "lt": Country.LT,
  "lu": Country.LU,
  "lv": Country.LV,
  "ma": Country.MA,
  "mc": Country.MC,
  "mk": Country.MK,
  "mt": Country.MT,
  "nl": Country.NL,
  "no": Country.NO,
  "other": Country.OTHER,
  "pl": Country.PL,
  "pt": Country.PT,
  "ro": Country.RO,
  "se": Country.SE,
  "si": Country.SI,
  "sk": Country.SK,
  "sm": Country.SM,
  "tr": Country.TR,
  "va": Country.VA
});

class PayloadPublication {
  FeedDescription feedDescription;
  String feedType;
  String lang;
  D2LogicalModelExtension payloadPublicationExtension;
  SupplierIdentification publicationCreator;
  DatextDateTime.DateTime publicationTime;

  PayloadPublication({
    this.feedDescription,
    this.feedType,
    this.lang,
    this.payloadPublicationExtension,
    this.publicationCreator,
    this.publicationTime,
  });

  factory PayloadPublication.fromJson(Map<String, dynamic> json) {

    String strDate = json["publicationTime"];
    DateTime dateTime = DateTime.parse(json["publicationTime"]);

    PayloadPublication payloadPublication = null;
    if (json != null) {
      payloadPublication = PayloadPublication(
        feedDescription: json["feedDescription"] == null
            ? null
            : FeedDescription
            .fromJson(json["feedDescription"]),
        feedType: json["feedType"] == null ? null : json["feedType"],
        lang: json["lang"] == null ? null : json["lang"],
        payloadPublicationExtension: json["payloadPublicationExtension"] == null
            ? null
            : D2LogicalModelExtension.fromJson(json["payloadPublicationExtension"]),
        publicationCreator: SupplierIdentification.fromJson(json["publicationCreator"]),
        publicationTime: json["publicationTime"] == null ? null : DatextDateTime.DateTime.fromJson(json["publicationTime"]),
      );
    }
    return payloadPublication;
  }

  Map<String, dynamic> toJson() => {
    "feedDescription": feedDescription == null ? null : feedDescription.toJson(),
    "feedType": feedType == null ? null : feedType,
    "lang": lang == null ? null : lang,
    "payloadPublicationExtension": payloadPublicationExtension == null ? null : payloadPublicationExtension.toJson(),
    "publicationCreator": publicationCreator.toJson(),
    "publicationTime": publicationTime == null ? null : publicationTime.toJson(),
  };
}

class FeedDescription {
  Values values;

  FeedDescription({
    this.values,
  });

  factory FeedDescription.fromJson(Map<String, dynamic> json) => FeedDescription(
    values: Values.fromJson(json["values"]),
  );

  Map<String, dynamic> toJson() => {
    "values": values.toJson(),
  };
}

class Values {
  List<MultilingualStringValue> value;

  Values({
    this.value,
  });

  factory Values.fromJson(Map<String, dynamic> json) => Values(
    value: List<MultilingualStringValue>.from(json["value"].map((x) => MultilingualStringValue.fromJson(x))),
  );

  Map<String, dynamic> toJson() => {
    "value": List<dynamic>.from(value.map((x) => x.toJson())),
  };
}

class MultilingualStringValue {
  String lang;
  String value;

  MultilingualStringValue({
    this.lang,
    this.value,
  });

  factory MultilingualStringValue.fromJson(Map<String, dynamic> json) {
    MultilingualStringValue multilingualStringValue = null;
    if (json != null) {
      multilingualStringValue = MultilingualStringValue(
        lang: json["lang"] == null ? null : json["lang"],
        value: json["value"] == null ? null : json["value"],
      );
    }
    return multilingualStringValue;
  }

  Map<String, dynamic> toJson() => {
    "lang": lang == null ? null : lang,
    "value": value == null ? null : value,
  };
}

class EnumValues<T> {
  Map<String, T> map;
  Map<T, String> reverseMap;

  EnumValues(this.map);

  Map<T, String> get reverse {
    if (reverseMap == null) {
      reverseMap = map.map((k, v) => new MapEntry(v, k));
    }
    return reverseMap;
  }
}
